@using Microsoft.AspNetCore.Authorization
@using CSE325_team.Data


@page "/admin/vehicles/create"
@attribute [Authorize(Roles = "Admin")]
@inject ApplicationDbContext Db
@inject NavigationManager Nav
@rendermode InteractiveServer

<h3>Add New Vehicle</h3>

<EditForm Model="@vehicle" OnValidSubmit="HandleValidSubmit" formname="createVehicleForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Make:</label>
        <InputText class="form-control" @bind-Value="vehicle.Make" />
        <ValidationMessage For="@(() => vehicle.Make)" />
    </div>

    <div class="mb-3">
        <label>Model:</label>
        <InputText class="form-control" @bind-Value="vehicle.Model" />
        <ValidationMessage For="@(() => vehicle.Model)" />
    </div>

    <div class="mb-3">
        <label>Year:</label>
        <InputNumber class="form-control" @bind-Value="vehicle.Year" />
        <ValidationMessage For="@(() => vehicle.Year)" />
    </div>

    <div class="mb-3">
        <label>Color:</label>
        <InputText class="form-control" @bind-Value="vehicle.Color" />
        <ValidationMessage For="@(() => vehicle.Color)" />
    </div>

    <div class="mb-3">
        <label>Vehicle Type:</label>
        <InputText class="form-control" @bind-Value="vehicle.VehicleType" />
        <ValidationMessage For="@(() => vehicle.VehicleType)" />
    </div>

    <div class="mb-3">
        <label>Transmission:</label>
        <InputText class="form-control" @bind-Value="vehicle.Transmission" />
        <ValidationMessage For="@(() => vehicle.Transmission)" />
    </div>

    <div class="mb-3">
        <label>Fuel Type:</label>
        <InputText class="form-control" @bind-Value="vehicle.FuelType" />
    </div>

    <div class="mb-3">
        <label>Daily Rate ($):</label>
        <InputNumber class="form-control" @bind-Value="vehicle.DailyRate" />
        <ValidationMessage For="@(() => vehicle.DailyRate)" />
    </div>

    <div class="mb-3">
        <label>Capacity:</label>
        <InputNumber class="form-control" @bind-Value="vehicle.Capacity" />
        <ValidationMessage For="@(() => vehicle.Capacity)" />
    </div>

    <div class="mb-3">
        <label>Mileage:</label>
        <InputNumber class="form-control" @bind-Value="vehicle.Mileage" />
    </div>

    <div class="mb-3">
        <label>Status:</label>
        <InputSelect class="form-control" @bind-Value="vehicle.Status">
            <option value="">-- Select Status --</option>
            <option value="available">Available</option>
            <option value="rented">Rented</option>
            <option value="reserved">Reserved</option>
            <option value="maintenance">Maintenance</option>
        </InputSelect>
        <ValidationMessage For="@(() => vehicle.Status)" />
    </div>

    <button class="btn btn-success" type="submit">Save</button>
    <NavLink class="btn btn-secondary" href="/admin/vehicles">Cancel</NavLink>
</EditForm>

@if (!string.IsNullOrWhiteSpace(debugMessage))
{
    <pre style="background:#f5f5f5; padding:1rem; font-size:0.9rem; color:#444;">
        @debugMessage
    </pre>
}


@code {
    private Vehicle vehicle = new()
    {
        Year = 2020,
        DailyRate = 50.00m,
        Mileage = 0,
        ImageFileName = "default.png"
    };

    private string debugMessage = "";

    private async Task HandleValidSubmit()
    {
        debugMessage = "üöÄ HandleValidSubmit triggered.\n";

        try
        {
            // Dump all field values
            foreach (var prop in typeof(Vehicle).GetProperties())
            {
                var value = prop.GetValue(vehicle);
                debugMessage += $"{prop.Name}: {(value ?? "null")}\n";
            }

            Db.Vehicle.Add(vehicle);
            int result = await Db.SaveChangesAsync();
            debugMessage += $"üíæ SaveChangesAsync() result: {result}\n";

            if (result > 0)
            {
                debugMessage += "‚úÖ Vehicle saved to database!\n";
                Nav.NavigateTo("/admin/vehicles");
            }
            else
            {
                debugMessage += "‚ö†Ô∏è SaveChangesAsync returned 0 (no changes saved).\n";
            }
        }
        catch (Exception ex)
        {
            debugMessage += $"‚ùå Exception: {ex.Message}\n{ex.StackTrace}";
        }
    }
}
