@using System.ComponentModel.DataAnnotations;
@page "/admin/vehicles/edit/{Id:int}"
@attribute [Authorize(Roles = "Admin")]
@inject ApplicationDbContext Db
@inject NavigationManager Nav
@rendermode InteractiveServer

<h3>Edit Vehicle</h3>

@if (vehicle is null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm @key="vehicle" Model="@vehicle" OnValidSubmit="HandleValidSubmit" OnFieldChanged="HandleFieldChanged" FormName="EditVehicleForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
        <label>Make:</label>
        <InputText class="form-control" @bind-Value="vehicle.Make" />
    </div>

    <div class="mb-3">
        <label>Model:</label>
        <InputText class="form-control" @bind-Value="vehicle.Model" />
    </div>

    <div class="mb-3">
        <label>Color:</label>
        <InputText class="form-control" @bind-Value="vehicle.Color" />
    </div>

    <div class="mb-3">
        <label>Vehicle Type:</label>
        <InputText class="form-control" @bind-Value="vehicle.VehicleType" />
    </div>

    <div class="mb-3">
    <label>Transmission:</label>
    <InputSelect class="form-control" @bind-Value="vehicle.Transmission">
        <option value="">Select Transmission</option>
        <option value="Automatic">Automatic</option>
        <option value="Manual">Manual</option>
    </InputSelect>
</div>


<p><strong>Live Transmission (bound):</strong> @vehicle.Transmission (@vehicle.GetHashCode())</p>

    <div class="mb-3">
        <label>Capacity:</label>
        <InputNumber class="form-control" @bind-Value="vehicle.Capacity" />
    </div>

    <div class="mb-3">
        <label>Year:</label>
        <InputNumber class="form-control" @bind-Value="vehicle.Year" />
    </div>

    <div class="mb-3">
        <label>Daily Rate ($):</label>
        <InputNumber class="form-control" @bind-Value="vehicle.DailyRate" />
    </div>

    <div class="mb-3">
        <label>Status:</label>
        <InputText class="form-control" @bind-Value="vehicle.Status" />
    </div>

        <button class="btn btn-success" type="submit">Save</button>
        <NavLink class="btn btn-secondary" href="/admin/vehicles">Cancel</NavLink>
    </EditForm>
}

@code {


private bool _initialized = false;

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        var fieldIdentifier = e.FieldIdentifier;
        var model = fieldIdentifier.Model;
        var propertyName = fieldIdentifier.FieldName;
        var propertyInfo = model?.GetType().GetProperty(propertyName);
        var value = propertyInfo?.GetValue(model, null);

        Console.WriteLine($"‚úèÔ∏è Field '{propertyName}' changed. New value: {value} | Model Hash: {model?.GetHashCode()} | vehicle Hash: {vehicle?.GetHashCode()}");
    }


    [Parameter] public int Id { get; set; }
    private Vehicle? vehicle;
    private Vehicle? _currentVehicle;
    private int _loadedVehicleId = -1;

    protected override async Task OnParametersSetAsync()
{

    Console.WriteLine("üîß Component initialized");
    if (_initialized)
    {
        Console.WriteLine("‚è≠ OnParametersSetAsync skipped: already initialized");
        return;
    }

    Console.WriteLine($"üìç vehicle before assignment: {vehicle?.GetHashCode()}");

    Console.WriteLine($"üîÑ OnParametersSetAsync: Id = {Id}");

    var fetched = await Db.Vehicle.FindAsync(Id);
    if (fetched != null)
    {
        _currentVehicle = fetched;
        _loadedVehicleId = Id;

        Console.WriteLine($"üß≤ Cached vehicle (Transmission): {_currentVehicle.Transmission}");

        if (string.IsNullOrWhiteSpace(_currentVehicle.Transmission))
        {
            _currentVehicle.Transmission = "Automatic";
        }

        if (vehicle is null)
        {
            vehicle = new Vehicle
            {
                VehicleId = _currentVehicle.VehicleId,
                Make = _currentVehicle.Make,
                Model = _currentVehicle.Model,
                Color = _currentVehicle.Color,
                VehicleType = _currentVehicle.VehicleType,
                Transmission = string.IsNullOrWhiteSpace(_currentVehicle.Transmission) ? "Automatic" : _currentVehicle.Transmission,
                Capacity = _currentVehicle.Capacity,
                Year = _currentVehicle.Year,
                DailyRate = _currentVehicle.DailyRate,
                Status = _currentVehicle.Status,
                Mileage = _currentVehicle.Mileage,
                FuelType = _currentVehicle.FuelType,
                ImageFileName = _currentVehicle.ImageFileName
            };
        }

        Console.WriteLine($"‚úÖ vehicle after assignment: {vehicle.GetHashCode()}");

        _initialized = true;
    }
}

    private async Task HandleValidSubmit()
    {
        if (vehicle is not null)
        {
            Console.WriteLine($"üöó Transmission: {vehicle.Transmission} | Object Hash: {vehicle.GetHashCode()}");

            Db.Vehicle.Update(vehicle);
            await Db.SaveChangesAsync();
            Nav.NavigateTo("/admin/vehicles");
        }
    }
}